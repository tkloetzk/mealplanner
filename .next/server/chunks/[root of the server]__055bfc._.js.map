{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/tucker/Dropbox/workspace/meal-planner/src/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nif (!process.env.MONGODB_URI) {\n  throw new Error(\"Please add your Mongo URI to .env.local\");\n}\n\nconst uri = process.env.MONGODB_URI;\nconst options = {};\n\nlet client;\nlet clientPromise: Promise<MongoClient>;\n\nif (process.env.NODE_ENV === \"development\") {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  const globalWithMongo = global as typeof globalThis & {\n    _mongoClientPromise?: Promise<MongoClient>;\n  };\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(uri, options);\n    globalWithMongo._mongoClientPromise = client.connect();\n  }\n  clientPromise = globalWithMongo._mongoClientPromise;\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options);\n  clientPromise = client.connect();\n}\n\nexport default clientPromise;\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,MAAM,kBAAkB;IAIxB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD,OAAO;;AAIP;uCAEe"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///Users/tucker/Dropbox/workspace/meal-planner/src/lib/meal-service.ts"],"sourcesContent":["import clientPromise from \"./mongodb\";\n\nexport interface MealPlan {\n  userId: string;\n  selections: any;\n  updatedAt: Date;\n}\n\nexport class MealService {\n  static async getUserMealPlan(userId: string) {\n    const client = await clientPromise;\n    const db = client.db(\"mealplanner\");\n\n    const mealPlan = await db.collection(\"mealPlans\").findOne({ userId });\n    return (\n      mealPlan?.selections || {\n        monday: {\n          breakfast: {\n            grains: null,\n            fruits: null,\n            proteins: null,\n            vegetables: null,\n          },\n          lunch: {\n            grains: null,\n            fruits: null,\n            proteins: null,\n            vegetables: null,\n          },\n          dinner: {\n            grains: null,\n            fruits: null,\n            proteins: null,\n            vegetables: null,\n          },\n          snack: {\n            grains: null,\n            fruits: null,\n            proteins: null,\n            vegetables: null,\n          },\n        },\n        tuesday: {\n          breakfast: {\n            grains: null,\n            fruits: null,\n            proteins: null,\n            vegetables: null,\n          },\n          lunch: {\n            grains: null,\n            fruits: null,\n            proteins: null,\n            vegetables: null,\n          },\n          dinner: {\n            grains: null,\n            fruits: null,\n            proteins: null,\n            vegetables: null,\n          },\n          snack: {\n            grains: null,\n            fruits: null,\n            proteins: null,\n            vegetables: null,\n          },\n        },\n      }\n    );\n  }\n\n  static async saveMealPlan(userId: string, selections: any) {\n    const client = await clientPromise;\n    const db = client.db(\"mealplanner\");\n\n    await db.collection(\"mealPlans\").updateOne(\n      { userId },\n      {\n        $set: {\n          selections,\n          updatedAt: new Date(),\n        },\n      },\n      { upsert: true }\n    );\n  }\n\n  static async getMealHistory(userId: string) {\n    const client = await clientPromise;\n    const db = client.db(\"mealplanner\");\n\n    const history = await db\n      .collection(\"mealHistory\")\n      .find({ userId })\n      .sort({ date: -1 })\n      .limit(10)\n      .toArray();\n\n    return history;\n  }\n\n  static async getFoods(userId: string) {\n    const client = await clientPromise;\n    const db = client.db(\"mealplanner\");\n\n    const foods = await db.collection(\"foods\").find({ userId }).toArray;\n    console.log(\"from service file\", foods);\n    return foods;\n  }\n\n  static async addToHistory(userId: string, mealEntry: any) {\n    const client = await clientPromise;\n    const db = client.db(\"mealplanner\");\n\n    await db.collection(\"mealHistory\").insertOne({\n      userId,\n      ...mealEntry,\n      createdAt: new Date(),\n    });\n  }\n\n  static async getFoodDatabase() {\n    const client = await clientPromise;\n    const db = client.db(\"mealplanner\");\n    const foods = await db.collection(\"foods\").find().toArray();\n    return foods;\n  }\n\n  static async saveUserFood(userId: string, food: any) {\n    const client = await clientPromise;\n    const db = client.db(\"mealplanner\");\n    await db.collection(\"foods\").insertOne({\n      ...food,\n      userId,\n      createdAt: new Date(),\n    });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAQO,MAAM;IACX,aAAa,gBAAgB,MAAc,EAAE;QAC3C,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,MAAM,WAAW,MAAM,GAAG,UAAU,CAAC,aAAa,OAAO,CAAC;YAAE;QAAO;QACnE,OACE,UAAU,cAAc;YACtB,QAAQ;gBACN,WAAW;oBACT,QAAQ;oBACR,QAAQ;oBACR,UAAU;oBACV,YAAY;gBACd;gBACA,OAAO;oBACL,QAAQ;oBACR,QAAQ;oBACR,UAAU;oBACV,YAAY;gBACd;gBACA,QAAQ;oBACN,QAAQ;oBACR,QAAQ;oBACR,UAAU;oBACV,YAAY;gBACd;gBACA,OAAO;oBACL,QAAQ;oBACR,QAAQ;oBACR,UAAU;oBACV,YAAY;gBACd;YACF;YACA,SAAS;gBACP,WAAW;oBACT,QAAQ;oBACR,QAAQ;oBACR,UAAU;oBACV,YAAY;gBACd;gBACA,OAAO;oBACL,QAAQ;oBACR,QAAQ;oBACR,UAAU;oBACV,YAAY;gBACd;gBACA,QAAQ;oBACN,QAAQ;oBACR,QAAQ;oBACR,UAAU;oBACV,YAAY;gBACd;gBACA,OAAO;oBACL,QAAQ;oBACR,QAAQ;oBACR,UAAU;oBACV,YAAY;gBACd;YACF;QACF;IAEJ;IAEA,aAAa,aAAa,MAAc,EAAE,UAAe,EAAE;QACzD,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,MAAM,GAAG,UAAU,CAAC,aAAa,SAAS,CACxC;YAAE;QAAO,GACT;YACE,MAAM;gBACJ;gBACA,WAAW,IAAI;YACjB;QACF,GACA;YAAE,QAAQ;QAAK;IAEnB;IAEA,aAAa,eAAe,MAAc,EAAE;QAC1C,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,MAAM,UAAU,MAAM,GACnB,UAAU,CAAC,eACX,IAAI,CAAC;YAAE;QAAO,GACd,IAAI,CAAC;YAAE,MAAM,CAAC;QAAE,GAChB,KAAK,CAAC,IACN,OAAO;QAEV,OAAO;IACT;IAEA,aAAa,SAAS,MAAc,EAAE;QACpC,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,MAAM,QAAQ,MAAM,GAAG,UAAU,CAAC,SAAS,IAAI,CAAC;YAAE;QAAO,GAAG,OAAO;QACnE,QAAQ,GAAG,CAAC,qBAAqB;QACjC,OAAO;IACT;IAEA,aAAa,aAAa,MAAc,EAAE,SAAc,EAAE;QACxD,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,MAAM,GAAG,UAAU,CAAC,eAAe,SAAS,CAAC;YAC3C;YACA,GAAG,SAAS;YACZ,WAAW,IAAI;QACjB;IACF;IAEA,aAAa,kBAAkB;QAC7B,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,MAAM,QAAQ,MAAM,GAAG,UAAU,CAAC,SAAS,IAAI,GAAG,OAAO;QACzD,OAAO;IACT;IAEA,aAAa,aAAa,MAAc,EAAE,IAAS,EAAE;QACnD,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,MAAM,GAAG,UAAU,CAAC,SAAS,SAAS,CAAC;YACrC,GAAG,IAAI;YACP;YACA,WAAW,IAAI;QACjB;IACF;AACF"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///Users/tucker/Dropbox/workspace/meal-planner/src/app/api/meals/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { MealService } from \"@/lib/meal-service\";\n\nexport async function GET() {\n  // For now, using a mock user ID until we implement authentication\n  const userId = \"default-user\";\n\n  try {\n    const mealPlan = await MealService.getUserMealPlan(userId);\n    return NextResponse.json(mealPlan);\n  } catch (error) {\n    console.error(\"Error fetching meal plan:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch meal plan\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  const userId = \"default-user\";\n\n  try {\n    const selections = await request.json();\n    await MealService.saveMealPlan(userId, selections);\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Error saving meal plan:\", error);\n    return NextResponse.json(\n      { error: \"Failed to save meal plan\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,kEAAkE;IAClE,MAAM,SAAS;IAEf,IAAI;QACF,MAAM,WAAW,MAAM,+HAAA,CAAA,cAAW,CAAC,eAAe,CAAC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,MAAM,SAAS;IAEf,IAAI;QACF,MAAM,aAAa,MAAM,QAAQ,IAAI;QACrC,MAAM,+HAAA,CAAA,cAAW,CAAC,YAAY,CAAC,QAAQ;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}