{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/tucker/Dropbox/workspace/mealplanner/src/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nif (!process.env.MONGODB_URI) {\n  throw new Error(\"Please add your Mongo URI to .env.local\");\n}\n\nconst uri = process.env.MONGODB_URI;\nconst options = {};\n\nlet client;\nlet clientPromise: Promise<MongoClient>;\n\nif (process.env.NODE_ENV === \"development\") {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  const globalWithMongo = global as typeof globalThis & {\n    _mongoClientPromise?: Promise<MongoClient>;\n  };\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(uri, options);\n    globalWithMongo._mongoClientPromise = client.connect();\n  }\n  clientPromise = globalWithMongo._mongoClientPromise;\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options);\n  clientPromise = client.connect();\n}\n\nexport default clientPromise;\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,MAAM,kBAAkB;IAIxB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD,OAAO;;AAIP;uCAEe"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///Users/tucker/Dropbox/workspace/mealplanner/src/lib/foods-service.ts"],"sourcesContent":["import clientPromise from \"@/lib/mongodb\";\nimport { Food, CategoryType } from \"@/types/food\";\n\nexport class FoodsService {\n  static async getAllFoods() {\n    try {\n      const client = await clientPromise;\n      const db = client.db(\"mealplanner\");\n      return await db.collection(\"foods\").find().toArray();\n    } catch (error) {\n      console.error(\"Error fetching foods:\", error);\n      return [];\n    }\n  }\n\n  static async getFoodsByCategory(category: CategoryType) {\n    try {\n      const client = await clientPromise;\n      const db = client.db(\"mealplanner\");\n      return await db.collection(\"foods\").find({ category }).toArray();\n    } catch (error) {\n      console.error(\"Error fetching foods by category:\", error);\n      return [];\n    }\n  }\n\n  static async addFood(food: Food) {\n    try {\n      const client = await clientPromise;\n      const db = client.db(\"mealplanner\");\n      const result = await db.collection(\"foods\").insertOne(food);\n      return { ...food, _id: result.insertedId };\n    } catch (error) {\n      console.error(\"Error adding food:\", error);\n      return null;\n    }\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM;IACX,aAAa,cAAc;QACzB,IAAI;YACF,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;YAClC,MAAM,KAAK,OAAO,EAAE,CAAC;YACrB,OAAO,MAAM,GAAG,UAAU,CAAC,SAAS,IAAI,GAAG,OAAO;QACpD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO,EAAE;QACX;IACF;IAEA,aAAa,mBAAmB,QAAsB,EAAE;QACtD,IAAI;YACF,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;YAClC,MAAM,KAAK,OAAO,EAAE,CAAC;YACrB,OAAO,MAAM,GAAG,UAAU,CAAC,SAAS,IAAI,CAAC;gBAAE;YAAS,GAAG,OAAO;QAChE,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qCAAqC;YACnD,OAAO,EAAE;QACX;IACF;IAEA,aAAa,QAAQ,IAAU,EAAE;QAC/B,IAAI;YACF,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;YAClC,MAAM,KAAK,OAAO,EAAE,CAAC;YACrB,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,SAAS,SAAS,CAAC;YACtD,OAAO;gBAAE,GAAG,IAAI;gBAAE,KAAK,OAAO,UAAU;YAAC;QAC3C,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,sBAAsB;YACpC,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///Users/tucker/Dropbox/workspace/mealplanner/src/app/api/foods/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { FoodsService } from \"@/lib/foods-service\";\n\nexport async function GET() {\n  try {\n    const foods = await FoodsService.getAllFoods();\n\n    // Group foods by category\n    const groupedFoods = foods.reduce((acc, food) => {\n      if (!acc[food.category]) {\n        acc[food.category] = [];\n      }\n      acc[food.category].push(food);\n      return acc;\n    }, {} as Record<string, any[]>);\n\n    return NextResponse.json(groupedFoods);\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch foods\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,gIAAA,CAAA,eAAY,CAAC,WAAW;QAE5C,0BAA0B;QAC1B,MAAM,eAAe,MAAM,MAAM,CAAC,CAAC,KAAK;YACtC,IAAI,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,EAAE;gBACvB,GAAG,CAAC,KAAK,QAAQ,CAAC,GAAG,EAAE;YACzB;YACA,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,IAAI,CAAC;YACxB,OAAO;QACT,GAAG,CAAC;QAEJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,UAAU;QACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}